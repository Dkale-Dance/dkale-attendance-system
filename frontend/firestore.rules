rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSuperAdmin() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isStudent() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isAdminOrSuperAdmin() {
      return isAdmin() || isSuperAdmin();
    }
    
    function isCurrentUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidUserData() {
      let validRoles = ['student', 'admin', 'superadmin'];
      let validStatuses = ['Enrolled', 'Inactive', 'Pending Payment', 'Removed'];
      
      let hasValidRole = request.resource.data.role is string && 
                         validRoles.hasAny([request.resource.data.role]);
      
      let hasValidEnrollmentStatus = request.resource.data.role == 'student' ? 
                                  request.resource.data.enrollmentStatus is string && 
                                  validStatuses.hasAny([request.resource.data.enrollmentStatus]) : 
                                  true;
      
      let hasValidBalance = request.resource.data.balance is number || 
                           !('balance' in request.resource.data);
      
      return hasValidRole && hasValidEnrollmentStatus && hasValidBalance;
    }
    
    function isValidAttendanceData() {
      let validStatuses = ['present', 'absent', 'late', 'medicalAbsence', 'holiday'];
      
      // Verify each student status is valid
      let allEntriesValid = true;
      let studentIds = request.resource.data.keys();
      
      for (let studentId in studentIds) {
        let studentData = request.resource.data[studentId];
        
        let hasValidStatus = studentData.status is string && 
                            validStatuses.hasAny([studentData.status]);
        
        let hasTimestamp = studentData.timestamp is timestamp;
        
        let hasValidAttributes = studentData.attributes is map || 
                                 !('attributes' in studentData);
        
        allEntriesValid = allEntriesValid && hasValidStatus && hasTimestamp && hasValidAttributes;
      }
      
      return allEntriesValid;
    }
    
    function isValidPaymentData() {
      let hasPositiveAmount = request.resource.data.amount is number && 
                             request.resource.data.amount > 0;
      
      let hasStudentId = request.resource.data.studentId is string;
      
      let hasTimestamp = request.resource.data.timestamp is timestamp;
      
      return hasPositiveAmount && hasStudentId && hasTimestamp;
    }
    
    function isValidAuditLogData() {
      let hasValidType = request.resource.data.type is string;
      
      let hasUserId = request.resource.data.userId is string;
      
      let hasEntityId = request.resource.data.entityId is string;
      
      let hasTimestamp = request.resource.data.timestamp is timestamp;
      
      let hasDetails = request.resource.data.details is map;
      
      return hasValidType && hasUserId && hasEntityId && hasTimestamp && hasDetails;
    }
    
    function studentIsUpdatingAllowedFields() {
      let allowedFields = ['firstName', 'lastName', 'phoneNumber', 'emailNotifications', 'emergencyContact'];
      
      let incomingFields = request.resource.data.diff(resource.data).affectedKeys();
      let allowedFieldsOnly = true;
      
      for (let field in incomingFields) {
        allowedFieldsOnly = allowedFieldsOnly && allowedFields.hasAny([field]);
      }
      
      return allowedFieldsOnly;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Read access
      allow read: if isSuperAdmin() || 
                 isAdmin() || 
                 isCurrentUser(userId) ||
                 true; // Allow public read access for public dashboard
      
      // Write access
      allow create: if isSuperAdmin() || 
                   (isAdmin() && request.resource.data.role != 'admin' && request.resource.data.role != 'superadmin') ||
                   (isSignedIn() && isCurrentUser(userId) && request.resource.data.role == 'student');
      
      allow update: if isSuperAdmin() || 
                   (isAdmin() && resource.data.role != 'admin' && resource.data.role != 'superadmin') ||
                   (isStudent() && isCurrentUser(userId) && studentIsUpdatingAllowedFields());
      
      allow delete: if isSuperAdmin();
      
      // Data validation for all operations
      allow write: if isValidUserData();
    }
    
    // Attendance collection rules
    match /attendance/{date} {
      // Read access
      allow read: if isAdminOrSuperAdmin() ||
                   isStudent() && resource.data.keys().hasAny([request.auth.uid]) ||
                   true; // Allow public read access for public dashboard
      
      // Write access - only admins can modify attendance
      allow write: if isAdminOrSuperAdmin() && isValidAttendanceData();
    }
    
    // Payments collection rules
    match /payments/{paymentId} {
      // Read access
      allow read: if isAdminOrSuperAdmin() ||
                   isStudent() && resource.data.studentId == request.auth.uid ||
                   true; // Allow public read access for public dashboard
      
      // Write access - only admins can modify payments
      allow write: if isAdminOrSuperAdmin() && isValidPaymentData();
    }
    
    // Audit logs collection rules
    match /auditLogs/{logId} {
      // Read access - only admins can read audit logs
      allow read: if isAdminOrSuperAdmin();
      
      // No client-side writes allowed to audit logs
      allow write: if false; // All audit logs should be written server-side for integrity
    }
  }
}